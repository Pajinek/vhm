#!/usr/bin/env python
# author: Pavel Studenik
# email: studenik@varhoo.cz
# year: 2015

import hashlib
import os

from apps.auth.models import UserProfile
from models import SvnRepository, SvnUserRights
from settings import *


def md5sum(filename, blocksize=65536):
    hash = hashlib.md5()
    with open(filename, "r+b") as f:
        for block in iter(lambda: f.read(blocksize), ""):
            hash.update(block)
    return hash.hexdigest()


class Generate(object):
    ENUM_RIGHT = {1: "r", 2: "rw"}

    def __init__(self):
        self.path_rights = PATH_RIGHS
        self.path_passwords = PATH_PASSWORDS

    def rights(self):
        content = ["# generated by vhm server"]
        for it in SvnRepository.objects.all():
            tpm_path = ""
            for right in SvnUserRights.objects.filter(repository=it.id).order_by("path"):
                if tpm_path == right.path:
                    content.append("%s = rw" % right.user)
                else:
                    content.append("[%s:%s]" % (it.name, right.path))
                    content.append(
                        "%s = %s" % (right.user, self.ENUM_RIGHT[right.rights]))
                    tpm_path = right.path
        return content

    def password(self):
        content = ["# generated by vhm server"]
        users_id = SvnUserRights.objects.values_list("user").distinct()
        for it in UserProfile.objects.filter(user__in=[it[0] for it in users_id]):
            content.append("%s:%s" % (it.user.username, it.hash_pass))
        return content

    def run(self):
        def compare(file1, text1):
            m1 = md5sum(file1)
            hash = hashlib.md5()
            hash.update(text1)
            m2 = hash.hexdigest()
            return m1 == m2

        def update(file1, text1):
            if not os.path.isfile(file1) or not compare(file1, text1):
                f = open(file1, "w")
                f.write(text1)
                f.close()

        content = "\n".join(self.rights())
        update(self.path_rights, content)

        content = "\n".join(self.password())
        update(self.path_passwords, content)
